{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"remaining"},{"kind":"text","text":": "},{"kind":"typeIdentifier","identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ArrayParsingStrategy","preciseIdentifier":"s:14ArgumentParser20ArrayParsingStrategyV","text":"ArrayParsingStrategy"},{"kind":"text","text":" { "},{"kind":"keyword","text":"get"},{"kind":"text","text":" }"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".remaining"},{"type":"text","text":" can be used for capturing pass-through flags. For example, for"},{"type":"text","text":" "},{"type":"text","text":"a parsable type defined as"},{"type":"text","text":" "},{"type":"codeVoice","code":"@Option(parsing: .remaining) var passthrough: [String]"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":null,"code":["$ cmd --passthrough --foo 1 --bar 2 -xvf","------------","options.passthrough == [\"--foo\", \"1\", \"--bar\", \"2\", \"-xvf\"]"]},{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This will read all inputs following the option without attempting to do any parsing. This is"},{"type":"text","text":" "},{"type":"text","text":"usually "},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"type":"text","text":" what users would expect. Use with caution."}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Consider using a trailing "},{"type":"codeVoice","code":"@Argument"},{"type":"text","text":" instead and letting users explicitly turn off parsing"},{"type":"text","text":" "},{"type":"text","text":"through the terminator "},{"type":"codeVoice","code":"--"},{"type":"text","text":". That is the more common approach. For example:"}]},{"type":"codeListing","syntax":"swift","code":["struct Options: ParsableArguments {","    @Option var name: String","    @Argument var remainder: [String]","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"would parse the input "},{"type":"codeVoice","code":"--name Foo -- Bar --baz"},{"type":"text","text":" such that the "},{"type":"codeVoice","code":"remainder"},{"type":"text","text":" "},{"type":"text","text":"would hold the value "},{"type":"codeVoice","code":"[\"Bar\", \"--baz\"]"},{"type":"text","text":"."}]}]}],"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/argumentparser\/arrayparsingstrategy\/remaining"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ArrayParsingStrategy\/remaining","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Parse all remaining arguments into an array."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"remaining"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ArrayParsingStrategy","preciseIdentifier":"s:14ArgumentParser20ArrayParsingStrategyV"}],"title":"remaining","roleHeading":"Type Property","role":"symbol","symbolKind":"property","externalID":"s:14ArgumentParser20ArrayParsingStrategyV9remainingACvpZ","modules":[{"name":"ArgumentParser"}]},"hierarchy":{"paths":[["doc:\/\/ArgumentParser\/documentation\/ArgumentParser","doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Option","doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ArrayParsingStrategy"]]},"references":{"doc://ArgumentParser/documentation/ArgumentParser/ArrayParsingStrategy/remaining":{"role":"symbol","title":"remaining","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"remaining"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ArrayParsingStrategy","preciseIdentifier":"s:14ArgumentParser20ArrayParsingStrategyV"}],"abstract":[{"type":"text","text":"Parse all remaining arguments into an array."}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ArrayParsingStrategy\/remaining","kind":"symbol","type":"topic","url":"\/documentation\/argumentparser\/arrayparsingstrategy\/remaining"},"doc://ArgumentParser/documentation/ArgumentParser":{"role":"collection","title":"ArgumentParser","abstract":[{"type":"text","text":"Straightforward, type-safe argument parsing for Swift."}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser","kind":"symbol","type":"topic","url":"\/documentation\/argumentparser"},"doc://ArgumentParser/documentation/ArgumentParser/ArrayParsingStrategy":{"role":"symbol","title":"ArrayParsingStrategy","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ArrayParsingStrategy"}],"abstract":[{"type":"text","text":"The strategy to use when parsing multiple values from "},{"type":"codeVoice","code":"@Option"},{"type":"text","text":" arguments into an"},{"type":"text","text":" "},{"type":"text","text":"array."}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ArrayParsingStrategy","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ArrayParsingStrategy"}],"url":"\/documentation\/argumentparser\/arrayparsingstrategy"},"doc://ArgumentParser/documentation/ArgumentParser/Option":{"role":"symbol","title":"Option","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Option"}],"abstract":[{"type":"text","text":"A property wrapper that represents a command-line option."}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Option","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Option"}],"url":"\/documentation\/argumentparser\/option"}}}