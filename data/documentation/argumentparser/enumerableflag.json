{"seeAlsoSections":[{"title":"Custom Types","identifiers":["doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ExpressibleByArgument"],"generated":true}],"schemaVersion":{"major":0,"minor":1,"patch":0},"metadata":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"EnumerableFlag"}],"title":"EnumerableFlag","roleHeading":"Protocol","role":"symbol","symbolKind":"protocol","externalID":"s:14ArgumentParser14EnumerableFlagP","modules":[{"name":"ArgumentParser"}],"navigatorTitle":[{"kind":"identifier","text":"EnumerableFlag"}]},"abstract":[{"type":"text","text":"A type that represents the different possible flags to be used by a"},{"type":"text","text":" "},{"type":"codeVoice","code":"@Flag"},{"type":"text","text":" property."}],"sections":[],"identifier":{"url":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/EnumerableFlag","interfaceLanguage":"swift"},"relationshipsSections":[{"identifiers":["doc:\/\/ArgumentParser\/s12CaseIterableP","doc:\/\/ArgumentParser\/SQ"],"kind":"relationships","title":"Inherits From","type":"inheritsFrom"}],"hierarchy":{"paths":[["doc:\/\/ArgumentParser\/documentation\/ArgumentParser"]]},"topicSections":[{"title":"Type Methods","identifiers":["doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/EnumerableFlag\/help(for:)-8mmm","doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/EnumerableFlag\/name(for:)-2rrp0"]}],"variants":[{"paths":["\/documentation\/argumentparser\/enumerableflag"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"EnumerableFlag"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"CaseIterable","preciseIdentifier":"s:s12CaseIterableP"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Equatable","preciseIdentifier":"s:SQ"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, the "},{"type":"codeVoice","code":"Size"},{"type":"text","text":" enumeration declared here can be used as the type of"},{"type":"text","text":" "},{"type":"text","text":"a "},{"type":"codeVoice","code":"@Flag"},{"type":"text","text":" property:"}]},{"type":"codeListing","syntax":null,"code":["enum Size: String, EnumerableFlag {","    case small, medium, large, extraLarge","}","","struct Example: ParsableCommand {","    @Flag var sizes: [Size]","","    mutating func run() {","        print(sizes)","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"By default, each case name is converted to a flag by using the "},{"type":"codeVoice","code":".long"},{"type":"text","text":" name"},{"type":"text","text":" "},{"type":"text","text":"specification, so a user can call "},{"type":"codeVoice","code":"example"},{"type":"text","text":" like this:"}]},{"type":"codeListing","syntax":null,"code":["$ example --small --large","[.small, .large]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Provide alternative or additional name specifications for each case by"},{"type":"text","text":" "},{"type":"text","text":"implementing the "},{"type":"codeVoice","code":"name(for:)"},{"type":"text","text":" static method on your "},{"type":"codeVoice","code":"EnumerableFlag"},{"type":"text","text":" type."}]},{"type":"codeListing","syntax":null,"code":["extension Size {","    static func name(for value: Self) -> NameSpecification {","        switch value {","        case .extraLarge:","            return [.customShort(\"x\"), .long]","        default:","            return .shortAndLong","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"With this extension, a user can use short or long versions of the flags:"}]},{"type":"codeListing","syntax":null,"code":["$ example -s -l -x --medium","[.small, .large, .extraLarge, .medium]"]}]}],"references":{"doc://ArgumentParser/documentation/ArgumentParser/EnumerableFlag":{"role":"symbol","title":"EnumerableFlag","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"EnumerableFlag"}],"abstract":[{"type":"text","text":"A type that represents the different possible flags to be used by a"},{"type":"text","text":" "},{"type":"codeVoice","code":"@Flag"},{"type":"text","text":" property."}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/EnumerableFlag","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"EnumerableFlag"}],"url":"\/documentation\/argumentparser\/enumerableflag"},"doc://ArgumentParser/SQ":{"type":"unresolvable","title":"Swift.Equatable","identifier":"doc:\/\/ArgumentParser\/SQ"},"doc://ArgumentParser/s12CaseIterableP":{"type":"unresolvable","title":"Swift.CaseIterable","identifier":"doc:\/\/ArgumentParser\/s12CaseIterableP"},"doc://ArgumentParser/documentation/ArgumentParser/EnumerableFlag/name(for:)-2rrp0":{"defaultImplementations":1,"role":"symbol","title":"name(for:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"name"},{"kind":"text","text":"("},{"kind":"externalParam","text":"for"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"NameSpecification","preciseIdentifier":"s:14ArgumentParser17NameSpecificationV"}],"abstract":[{"type":"text","text":"Returns the name specification to use for the given flag."}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/EnumerableFlag\/name(for:)-2rrp0","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/argumentparser\/enumerableflag\/name(for:)-2rrp0"},"doc://ArgumentParser/documentation/ArgumentParser/EnumerableFlag/help(for:)-8mmm":{"defaultImplementations":1,"role":"symbol","title":"help(for:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"help"},{"kind":"text","text":"("},{"kind":"externalParam","text":"for"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"ArgumentHelp","preciseIdentifier":"s:14ArgumentParser0A4HelpV"},{"kind":"text","text":"?"}],"abstract":[{"type":"text","text":"Returns the help information to show for the given flag."}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/EnumerableFlag\/help(for:)-8mmm","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/argumentparser\/enumerableflag\/help(for:)-8mmm"},"doc://ArgumentParser/documentation/ArgumentParser/ExpressibleByArgument":{"role":"symbol","title":"ExpressibleByArgument","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ExpressibleByArgument"}],"abstract":[{"type":"text","text":"A type that can be expressed as a command-line argument."}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ExpressibleByArgument","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ExpressibleByArgument"}],"url":"\/documentation\/argumentparser\/expressiblebyargument"},"doc://ArgumentParser/documentation/ArgumentParser":{"role":"collection","title":"ArgumentParser","abstract":[{"type":"text","text":"Straightforward, type-safe argument parsing for Swift."}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser","kind":"symbol","type":"topic","url":"\/documentation\/argumentparser"}}}