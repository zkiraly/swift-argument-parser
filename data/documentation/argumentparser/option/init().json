{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"init"},{"kind":"text","text":"()"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"codeListing","syntax":"swift","code":["@Option() var foo: String \/\/ Syntax without this initializer","@Option var foo: String   \/\/ Syntax with this initializer"]}]}],"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[],"deprecationSummary":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A default value must be provided unless the value type conforms to ExpressibleByArgument."}]}],"variants":[{"paths":["\/documentation\/argumentparser\/option\/init()"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Option\/init()","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"This initializer works around a quirk of property wrappers, where the"},{"type":"text","text":" "},{"type":"text","text":"compiler will not see no-argument initializers in extensions. Explicitly"},{"type":"text","text":" "},{"type":"text","text":"marking this initializer unavailable means that when "},{"type":"codeVoice","code":"Value"},{"type":"text","text":" conforms to"},{"type":"text","text":" "},{"type":"codeVoice","code":"ExpressibleByArgument"},{"type":"text","text":", that overload will be selected instead."}],"kind":"symbol","metadata":{"role":"symbol","title":"init()","roleHeading":"Initializer","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"()"}],"symbolKind":"init","externalID":"s:14ArgumentParser6OptionVACyxGycfc","modules":[{"name":"ArgumentParser"}],"platforms":[]},"hierarchy":{"paths":[["doc:\/\/ArgumentParser\/documentation\/ArgumentParser","doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Option"]]},"seeAlsoSections":[{"title":"Infrequently Used APIs","identifiers":["doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Option\/init(from:)","doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Option\/wrappedValue"],"generated":true}],"references":{"doc://ArgumentParser/documentation/ArgumentParser/Option":{"role":"symbol","title":"Option","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Option"}],"abstract":[{"type":"text","text":"A property wrapper that represents a command-line option."}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Option","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Option"}],"url":"\/documentation\/argumentparser\/option"},"doc://ArgumentParser/documentation/ArgumentParser/Option/wrappedValue":{"role":"symbol","title":"wrappedValue","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"wrappedValue"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"}],"abstract":[{"type":"text","text":"The value presented by this property wrapper."}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Option\/wrappedValue","kind":"symbol","type":"topic","url":"\/documentation\/argumentparser\/option\/wrappedvalue"},"doc://ArgumentParser/documentation/ArgumentParser":{"role":"collection","title":"ArgumentParser","abstract":[{"type":"text","text":"Straightforward, type-safe argument parsing for Swift."}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser","kind":"symbol","type":"topic","url":"\/documentation\/argumentparser"},"doc://ArgumentParser/documentation/ArgumentParser/Option/init()":{"role":"symbol","title":"init()","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"This initializer works around a quirk of property wrappers, where the"},{"type":"text","text":" "},{"type":"text","text":"compiler will not see no-argument initializers in extensions. Explicitly"},{"type":"text","text":" "},{"type":"text","text":"marking this initializer unavailable means that when "},{"type":"codeVoice","code":"Value"},{"type":"text","text":" conforms to"},{"type":"text","text":" "},{"type":"codeVoice","code":"ExpressibleByArgument"},{"type":"text","text":", that overload will be selected instead."}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Option\/init()","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/argumentparser\/option\/init()"},"doc://ArgumentParser/documentation/ArgumentParser/Option/init(from:)":{"role":"symbol","title":"init(from:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"from"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Decoder","preciseIdentifier":"s:s7DecoderP"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"}],"abstract":[],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Option\/init(from:)","kind":"symbol","type":"topic","url":"\/documentation\/argumentparser\/option\/init(from:)"}}}