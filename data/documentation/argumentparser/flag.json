{"seeAlsoSections":[{"title":"Arguments, Options, and Flags","identifiers":["doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/DeclaringArguments","doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Argument","doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Option","doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/OptionGroup","doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ParsableArguments"],"generated":true}],"schemaVersion":{"major":0,"minor":1,"patch":0},"metadata":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Flag"}],"title":"Flag","roleHeading":"Structure","role":"symbol","symbolKind":"struct","externalID":"s:14ArgumentParser4FlagV","modules":[{"name":"ArgumentParser"}],"navigatorTitle":[{"kind":"identifier","text":"Flag"}]},"abstract":[{"type":"text","text":"A property wrapper that represents a command-line flag."}],"sections":[],"identifier":{"url":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag","interfaceLanguage":"swift"},"relationshipsSections":[{"identifiers":["doc:\/\/ArgumentParser\/s23CustomStringConvertibleP","doc:\/\/ArgumentParser\/Se"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"hierarchy":{"paths":[["doc:\/\/ArgumentParser\/documentation\/ArgumentParser"]]},"topicSections":[{"title":"Boolean Flags","identifiers":["doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(wrappedValue:name:help:)"]},{"title":"Boolean Flags with Inversions","identifiers":["doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(wrappedValue:name:inversion:exclusivity:help:)","doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(name:inversion:exclusivity:help:)-12okg","doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(name:inversion:exclusivity:help:)-1h8f7","doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/FlagInversion"]},{"title":"Counted Flags","identifiers":["doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(name:help:)"]},{"title":"Custom Enumerable Flags","identifiers":["doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(help:)","doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(exclusivity:help:)-38n7u","doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(exclusivity:help:)-5fggj","doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(wrappedValue:exclusivity:help:)","doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(wrappedValue:help:)"]},{"title":"Infrequently Used APIs","identifiers":["doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(from:)","doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/wrappedValue"]},{"title":"Supporting Types","identifiers":["doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/FlagExclusivity"]},{"title":"Deprecated APIs","identifiers":["doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/init()"]},{"title":"Default Implementations","identifiers":["doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/CustomStringConvertible-Implementations"],"generated":true}],"variants":[{"paths":["\/documentation\/argumentparser\/flag"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"attribute","text":"@propertyWrapper"},{"kind":"text","text":" "},{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Flag"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"@Flag"},{"type":"text","text":" wrapper to define a property of your custom type as a"},{"type":"text","text":" "},{"type":"text","text":"command-line flag. A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"flag"}]},{"type":"text","text":" is a dash-prefixed label that can be provided on"},{"type":"text","text":" "},{"type":"text","text":"the command line, such as "},{"type":"codeVoice","code":"-d"},{"type":"text","text":" and "},{"type":"codeVoice","code":"--debug"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, the following program declares a flag that lets a user indicate"},{"type":"text","text":" "},{"type":"text","text":"that seconds should be included when printing the time."}]},{"type":"codeListing","syntax":null,"code":["@main","struct Time: ParsableCommand {","    @Flag var includeSeconds = false","","    mutating func run() {","        if includeSeconds {","            print(Date.now.formatted(.dateTime.hour().minute().second()))","        } else {","            print(Date.now.formatted(.dateTime.hour().minute()))","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"includeSeconds"},{"type":"text","text":" has a default value of "},{"type":"codeVoice","code":"false"},{"type":"text","text":", but becomes "},{"type":"codeVoice","code":"true"},{"type":"text","text":" if"},{"type":"text","text":" "},{"type":"codeVoice","code":"--include-seconds"},{"type":"text","text":" is provided on the command line."}]},{"type":"codeListing","syntax":null,"code":["$ time","11:09 AM","$ time --include-seconds","11:09:15 AM"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A flag can have a value that is a "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":", an "},{"type":"codeVoice","code":"Int"},{"type":"text","text":", or any "},{"type":"codeVoice","code":"EnumerableFlag"},{"type":"text","text":" "},{"type":"text","text":"type. When using an "},{"type":"codeVoice","code":"EnumerableFlag"},{"type":"text","text":" type as a flag, the individual cases"},{"type":"text","text":" "},{"type":"text","text":"form the flags that are used on the command line."}]},{"type":"codeListing","syntax":null,"code":["@main","struct Math: ParsableCommand {","    enum Operation: EnumerableFlag {","        case add","        case multiply","    }","","    @Flag var operation: Operation","","    mutating func run() {","        print(\"Time to \\(operation)!\")","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Instead of using the name of the "},{"type":"codeVoice","code":"operation"},{"type":"text","text":" property as the flag in this"},{"type":"text","text":" "},{"type":"text","text":"case, the two cases of the "},{"type":"codeVoice","code":"Operation"},{"type":"text","text":" enumeration become valid flags."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"operation"},{"type":"text","text":" property is neither optional nor given a default value, so"},{"type":"text","text":" "},{"type":"text","text":"one of the two flags is required."}]},{"type":"codeListing","syntax":null,"code":["$ math --add","Time to add!","$ math","Error: Missing one of: '--add', '--multiply'"]}]}],"references":{"doc://ArgumentParser/documentation/ArgumentParser/Flag/wrappedValue":{"role":"symbol","title":"wrappedValue","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"wrappedValue"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"}],"abstract":[{"type":"text","text":"The value presented by this property wrapper."}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/wrappedValue","kind":"symbol","type":"topic","url":"\/documentation\/argumentparser\/flag\/wrappedvalue"},"doc://ArgumentParser/documentation/ArgumentParser":{"role":"collection","title":"ArgumentParser","abstract":[{"type":"text","text":"Straightforward, type-safe argument parsing for Swift."}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser","kind":"symbol","type":"topic","url":"\/documentation\/argumentparser"},"doc://ArgumentParser/documentation/ArgumentParser/Flag/init()":{"role":"symbol","title":"init()","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"This initializer works around a quirk of property wrappers, where the"},{"type":"text","text":" "},{"type":"text","text":"compiler will not see no-argument initializers in extensions. Explicitly"},{"type":"text","text":" "},{"type":"text","text":"marking this initializer unavailable means that when "},{"type":"codeVoice","code":"Value"},{"type":"text","text":" is a type"},{"type":"text","text":" "},{"type":"text","text":"supported by "},{"type":"codeVoice","code":"Flag"},{"type":"text","text":" like "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":" or "},{"type":"codeVoice","code":"EnumerableFlag"},{"type":"text","text":", the appropriate"},{"type":"text","text":" "},{"type":"text","text":"overload will be selected instead."}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/init()","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/argumentparser\/flag\/init()"},"doc://ArgumentParser/documentation/ArgumentParser/Flag/init(wrappedValue:name:help:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Value"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"init(wrappedValue:name:help:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"wrappedValue"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":", "},{"kind":"externalParam","text":"name"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"NameSpecification","preciseIdentifier":"s:14ArgumentParser17NameSpecificationV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"help"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ArgumentHelp","preciseIdentifier":"s:14ArgumentParser0A4HelpV"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Creates a Boolean property with default value provided by standard Swift default value syntax that reads its value from the presence of a flag."}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(wrappedValue:name:help:)","kind":"symbol","type":"topic","url":"\/documentation\/argumentparser\/flag\/init(wrappedvalue:name:help:)"},"doc://ArgumentParser/documentation/ArgumentParser/FlagInversion":{"role":"symbol","title":"FlagInversion","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FlagInversion"}],"abstract":[{"type":"text","text":"The options for converting a Boolean flag into a "},{"type":"codeVoice","code":"true"},{"type":"text","text":"\/"},{"type":"codeVoice","code":"false"},{"type":"text","text":" pair."}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/FlagInversion","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"FlagInversion"}],"url":"\/documentation\/argumentparser\/flaginversion"},"doc://ArgumentParser/documentation/ArgumentParser/Flag":{"role":"symbol","title":"Flag","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Flag"}],"abstract":[{"type":"text","text":"A property wrapper that represents a command-line flag."}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Flag"}],"url":"\/documentation\/argumentparser\/flag"},"doc://ArgumentParser/documentation/ArgumentParser/Flag/init(exclusivity:help:)-5fggj":{"conformance":{"constraints":[{"type":"codeVoice","code":"Value"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"EnumerableFlag"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"init(exclusivity:help:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"exclusivity"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"FlagExclusivity","preciseIdentifier":"s:14ArgumentParser15FlagExclusivityV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"help"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ArgumentHelp","preciseIdentifier":"s:14ArgumentParser0A4HelpV"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Creates a property with no default value that gets its value from the presence of a flag."}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(exclusivity:help:)-5fggj","kind":"symbol","type":"topic","url":"\/documentation\/argumentparser\/flag\/init(exclusivity:help:)-5fggj"},"doc://ArgumentParser/documentation/ArgumentParser/Argument":{"role":"symbol","title":"Argument","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Argument"}],"abstract":[{"type":"text","text":"A property wrapper that represents a positional command-line argument."}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Argument","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Argument"}],"url":"\/documentation\/argumentparser\/argument"},"doc://ArgumentParser/documentation/ArgumentParser/OptionGroup":{"role":"symbol","title":"OptionGroup","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"OptionGroup"}],"abstract":[{"type":"text","text":"A wrapper that transparently includes a parsable type."}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/OptionGroup","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"OptionGroup"}],"url":"\/documentation\/argumentparser\/optiongroup"},"doc://ArgumentParser/documentation/ArgumentParser/Flag/init(exclusivity:help:)-38n7u":{"role":"symbol","title":"init(exclusivity:help:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Element"},{"kind":"text","text":">("},{"kind":"externalParam","text":"exclusivity"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"FlagExclusivity","preciseIdentifier":"s:14ArgumentParser15FlagExclusivityV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"help"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ArgumentHelp","preciseIdentifier":"s:14ArgumentParser0A4HelpV"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Creates a property that gets its value from the presence of a flag,"},{"type":"text","text":" "},{"type":"text","text":"where the allowed flags are defined by an "},{"type":"codeVoice","code":"EnumerableFlag"},{"type":"text","text":" type."}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(exclusivity:help:)-38n7u","kind":"symbol","type":"topic","url":"\/documentation\/argumentparser\/flag\/init(exclusivity:help:)-38n7u"},"doc://ArgumentParser/documentation/ArgumentParser/Flag/init(name:help:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Value"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Int"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"init(name:help:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"name"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"NameSpecification","preciseIdentifier":"s:14ArgumentParser17NameSpecificationV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"help"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ArgumentHelp","preciseIdentifier":"s:14ArgumentParser0A4HelpV"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Creates an integer property that gets its value from the number of times"},{"type":"text","text":" "},{"type":"text","text":"a flag appears."}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(name:help:)","kind":"symbol","type":"topic","url":"\/documentation\/argumentparser\/flag\/init(name:help:)"},"doc://ArgumentParser/documentation/ArgumentParser/Flag/init(name:inversion:exclusivity:help:)-12okg":{"conformance":{"constraints":[{"type":"codeVoice","code":"Value"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"init(name:inversion:exclusivity:help:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"name"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"NameSpecification","preciseIdentifier":"s:14ArgumentParser17NameSpecificationV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"inversion"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"FlagInversion","preciseIdentifier":"s:14ArgumentParser13FlagInversionV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"exclusivity"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"FlagExclusivity","preciseIdentifier":"s:14ArgumentParser15FlagExclusivityV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"help"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ArgumentHelp","preciseIdentifier":"s:14ArgumentParser0A4HelpV"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Creates a Boolean property with no default value that reads its value from the presence of one or more inverted flags."}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(name:inversion:exclusivity:help:)-12okg","kind":"symbol","type":"topic","url":"\/documentation\/argumentparser\/flag\/init(name:inversion:exclusivity:help:)-12okg"},"doc://ArgumentParser/Se":{"type":"unresolvable","title":"Swift.Decodable","identifier":"doc:\/\/ArgumentParser\/Se"},"doc://ArgumentParser/documentation/ArgumentParser/Flag/init(help:)":{"role":"symbol","title":"init(help:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Element"},{"kind":"text","text":">("},{"kind":"externalParam","text":"help"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ArgumentHelp","preciseIdentifier":"s:14ArgumentParser0A4HelpV"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Creates an array property with no default value that gets its values from the presence of zero or more flags, where the allowed flags are defined by an "},{"type":"codeVoice","code":"EnumerableFlag"},{"type":"text","text":" type."}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(help:)","kind":"symbol","type":"topic","url":"\/documentation\/argumentparser\/flag\/init(help:)"},"doc://ArgumentParser/documentation/ArgumentParser/Flag/init(wrappedValue:help:)":{"role":"symbol","title":"init(wrappedValue:help:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Element"},{"kind":"text","text":">("},{"kind":"externalParam","text":"wrappedValue"},{"kind":"text","text":": ["},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"], "},{"kind":"externalParam","text":"help"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ArgumentHelp","preciseIdentifier":"s:14ArgumentParser0A4HelpV"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Creates an array property that gets its values from the presence of"},{"type":"text","text":" "},{"type":"text","text":"zero or more flags, where the allowed flags are defined by an"},{"type":"text","text":" "},{"type":"codeVoice","code":"EnumerableFlag"},{"type":"text","text":" type."}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(wrappedValue:help:)","kind":"symbol","type":"topic","url":"\/documentation\/argumentparser\/flag\/init(wrappedvalue:help:)"},"doc://ArgumentParser/s23CustomStringConvertibleP":{"type":"unresolvable","title":"Swift.CustomStringConvertible","identifier":"doc:\/\/ArgumentParser\/s23CustomStringConvertibleP"},"doc://ArgumentParser/documentation/ArgumentParser/Flag/init(wrappedValue:name:inversion:exclusivity:help:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Value"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"init(wrappedValue:name:inversion:exclusivity:help:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"wrappedValue"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":", "},{"kind":"externalParam","text":"name"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"NameSpecification","preciseIdentifier":"s:14ArgumentParser17NameSpecificationV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"inversion"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"FlagInversion","preciseIdentifier":"s:14ArgumentParser13FlagInversionV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"exclusivity"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"FlagExclusivity","preciseIdentifier":"s:14ArgumentParser15FlagExclusivityV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"help"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ArgumentHelp","preciseIdentifier":"s:14ArgumentParser0A4HelpV"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Creates a Boolean property with default value provided by standard Swift default value syntax that reads its value from the presence of one or more inverted flags."}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(wrappedValue:name:inversion:exclusivity:help:)","kind":"symbol","type":"topic","url":"\/documentation\/argumentparser\/flag\/init(wrappedvalue:name:inversion:exclusivity:help:)"},"doc://ArgumentParser/documentation/ArgumentParser/Flag/init(wrappedValue:exclusivity:help:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Value"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"EnumerableFlag"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"init(wrappedValue:exclusivity:help:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"wrappedValue"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"exclusivity"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"FlagExclusivity","preciseIdentifier":"s:14ArgumentParser15FlagExclusivityV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"help"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ArgumentHelp","preciseIdentifier":"s:14ArgumentParser0A4HelpV"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Creates a property with a default value provided by standard Swift default value syntax that gets its value from the presence of a flag."}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(wrappedValue:exclusivity:help:)","kind":"symbol","type":"topic","url":"\/documentation\/argumentparser\/flag\/init(wrappedvalue:exclusivity:help:)"},"doc://ArgumentParser/documentation/ArgumentParser/Flag/CustomStringConvertible-Implementations":{"role":"collectionGroup","title":"CustomStringConvertible Implementations","abstract":[],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/CustomStringConvertible-Implementations","kind":"article","type":"topic","url":"\/documentation\/argumentparser\/flag\/customstringconvertible-implementations"},"doc://ArgumentParser/documentation/ArgumentParser/Option":{"role":"symbol","title":"Option","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Option"}],"abstract":[{"type":"text","text":"A property wrapper that represents a command-line option."}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Option","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Option"}],"url":"\/documentation\/argumentparser\/option"},"doc://ArgumentParser/documentation/ArgumentParser/ParsableArguments":{"role":"symbol","title":"ParsableArguments","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParsableArguments"}],"abstract":[{"type":"text","text":"A type that can be parsed from a program’s command-line arguments."}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ParsableArguments","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ParsableArguments"}],"url":"\/documentation\/argumentparser\/parsablearguments"},"doc://ArgumentParser/documentation/ArgumentParser/Flag/init(name:inversion:exclusivity:help:)-1h8f7":{"conformance":{"constraints":[{"type":"codeVoice","code":"Value"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Optional<Bool>"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"init(name:inversion:exclusivity:help:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"name"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"NameSpecification","preciseIdentifier":"s:14ArgumentParser17NameSpecificationV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"inversion"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"FlagInversion","preciseIdentifier":"s:14ArgumentParser13FlagInversionV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"exclusivity"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"FlagExclusivity","preciseIdentifier":"s:14ArgumentParser15FlagExclusivityV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"help"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ArgumentHelp","preciseIdentifier":"s:14ArgumentParser0A4HelpV"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Creates a Boolean property that reads its value from the presence of"},{"type":"text","text":" "},{"type":"text","text":"one or more inverted flags."}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(name:inversion:exclusivity:help:)-1h8f7","kind":"symbol","type":"topic","url":"\/documentation\/argumentparser\/flag\/init(name:inversion:exclusivity:help:)-1h8f7"},"doc://ArgumentParser/documentation/ArgumentParser/Flag/init(from:)":{"role":"symbol","title":"init(from:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"from"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Decoder","preciseIdentifier":"s:s7DecoderP"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"}],"abstract":[],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/init(from:)","kind":"symbol","type":"topic","url":"\/documentation\/argumentparser\/flag\/init(from:)"},"doc://ArgumentParser/documentation/ArgumentParser/FlagExclusivity":{"role":"symbol","title":"FlagExclusivity","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FlagExclusivity"}],"abstract":[{"type":"text","text":"The options for treating enumeration-based flags as exclusive."}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/FlagExclusivity","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"FlagExclusivity"}],"url":"\/documentation\/argumentparser\/flagexclusivity"},"doc://ArgumentParser/documentation/ArgumentParser/DeclaringArguments":{"role":"article","title":"Declaring Arguments, Options, and Flags","abstract":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"@Argument"},{"type":"text","text":", "},{"type":"codeVoice","code":"@Option"},{"type":"text","text":" and "},{"type":"codeVoice","code":"@Flag"},{"type":"text","text":" property wrappers to declare the command-line interface for your command."}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/DeclaringArguments","kind":"article","type":"topic","url":"\/documentation\/argumentparser\/declaringarguments"}}}