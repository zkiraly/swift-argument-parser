{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"init"},{"kind":"text","text":"()"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"codeListing","syntax":"swift","code":["@Flag() var flag: Bool  \/\/ Syntax without this initializer","@Flag var flag: Bool    \/\/ Syntax with this initializer"]}]}],"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/argumentparser\/flag\/init()"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/init()","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"This initializer works around a quirk of property wrappers, where the"},{"type":"text","text":" "},{"type":"text","text":"compiler will not see no-argument initializers in extensions. Explicitly"},{"type":"text","text":" "},{"type":"text","text":"marking this initializer unavailable means that when "},{"type":"codeVoice","code":"Value"},{"type":"text","text":" is a type"},{"type":"text","text":" "},{"type":"text","text":"supported by "},{"type":"codeVoice","code":"Flag"},{"type":"text","text":" like "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":" or "},{"type":"codeVoice","code":"EnumerableFlag"},{"type":"text","text":", the appropriate"},{"type":"text","text":" "},{"type":"text","text":"overload will be selected instead."}],"kind":"symbol","metadata":{"role":"symbol","title":"init()","roleHeading":"Initializer","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"()"}],"symbolKind":"init","externalID":"s:14ArgumentParser4FlagVACyxGycfc","modules":[{"name":"ArgumentParser"}],"platforms":[]},"hierarchy":{"paths":[["doc:\/\/ArgumentParser\/documentation\/ArgumentParser","doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag"]]},"deprecationSummary":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A default value must be provided unless the value type is supported by Flag."}]}],"references":{"doc://ArgumentParser/documentation/ArgumentParser":{"role":"collection","title":"ArgumentParser","abstract":[{"type":"text","text":"Straightforward, type-safe argument parsing for Swift."}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser","kind":"symbol","type":"topic","url":"\/documentation\/argumentparser"},"doc://ArgumentParser/documentation/ArgumentParser/Flag/init()":{"role":"symbol","title":"init()","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"This initializer works around a quirk of property wrappers, where the"},{"type":"text","text":" "},{"type":"text","text":"compiler will not see no-argument initializers in extensions. Explicitly"},{"type":"text","text":" "},{"type":"text","text":"marking this initializer unavailable means that when "},{"type":"codeVoice","code":"Value"},{"type":"text","text":" is a type"},{"type":"text","text":" "},{"type":"text","text":"supported by "},{"type":"codeVoice","code":"Flag"},{"type":"text","text":" like "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":" or "},{"type":"codeVoice","code":"EnumerableFlag"},{"type":"text","text":", the appropriate"},{"type":"text","text":" "},{"type":"text","text":"overload will be selected instead."}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag\/init()","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/argumentparser\/flag\/init()"},"doc://ArgumentParser/documentation/ArgumentParser/Flag":{"role":"symbol","title":"Flag","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Flag"}],"abstract":[{"type":"text","text":"A property wrapper that represents a command-line flag."}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/Flag","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Flag"}],"url":"\/documentation\/argumentparser\/flag"}}}