{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can provide help text when declaring any "},{"type":"codeVoice","code":"@Argument"},{"type":"text","text":", "},{"type":"codeVoice","code":"@Option"},{"type":"text","text":", or "},{"type":"codeVoice","code":"@Flag"},{"type":"text","text":" by passing a string literal as the "},{"type":"codeVoice","code":"help"},{"type":"text","text":" parameter:"}]},{"type":"codeListing","syntax":"swift","code":["struct Example: ParsableCommand {","    @Flag(help: \"Display extra information while processing.\")","    var verbose = false","","    @Option(help: \"The number of extra lines to show.\")","    var extraLines = 0","","    @Argument(help: \"The input file.\")","    var inputFile: String?","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Users see these strings in the automatically-generated help screen, which is triggered by the "},{"type":"codeVoice","code":"-h"},{"type":"text","text":" or "},{"type":"codeVoice","code":"--help"},{"type":"text","text":" flags, by default:"}]},{"type":"codeListing","syntax":null,"code":["% example --help","USAGE: example [--verbose] [--extra-lines <extra-lines>] <input-file>","","ARGUMENTS:","  <input-file>            The input file.","","OPTIONS:","  --verbose               Display extra information while processing.","  --extra-lines <extra-lines>","                          The number of extra lines to show. (default: 0)","  -h, --help              Show help information."]},{"anchor":"Customizing-Help-for-Arguments","level":2,"type":"heading","text":"Customizing Help for Arguments"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can have more control over the help text by passing an "},{"type":"codeVoice","code":"ArgumentHelp"},{"type":"text","text":" instance instead. The "},{"type":"codeVoice","code":"ArgumentHelp"},{"type":"text","text":" type can include an abstract (which is what the string literal becomes), a discussion, a value name to use in the usage string, and a Boolean that indicates whether the argument should be visible in the help screen."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s the same command with some extra customization:"}]},{"type":"codeListing","syntax":"swift","code":["struct Example: ParsableCommand {","    @Flag(help: \"Display extra information while processing.\")","    var verbose = false","","    @Option(help: ArgumentHelp(","        \"The number of extra lines to show.\",","        valueName: \"n\"))","    var extraLines = 0","","    @Argument(help: ArgumentHelp(","        \"The input file.\",","        discussion: \"If no input file is provided, the tool reads from stdin.\",","        valueName: \"file\"))","    var inputFile: String?","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"…and the help screen:"}]},{"type":"codeListing","syntax":null,"code":["USAGE: example [--verbose] [--extra-lines <n>] [<file>]","","ARGUMENTS:","  <file>                  The input file.","        If no input file is provided, the tool reads from stdin.","","OPTIONS:","  --verbose               Display extra information while processing.","  --extra-lines <n>       The number of extra lines to show. (default: 0)","  -h, --help              Show help information."]},{"anchor":"Customizing-Help-for-Commands","level":2,"type":"heading","text":"Customizing Help for Commands"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In addition to configuring the command name and subcommands, as described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/CommandsAndSubcommands"},{"type":"text","text":", you can also configure a command’s help text by providing an abstract and discussion."}]},{"type":"codeListing","syntax":"swift","code":["struct Repeat: ParsableCommand {","    static var configuration = CommandConfiguration(","        abstract: \"Repeats your input phrase.\",","        discussion: \"\"\"","            Prints to stdout forever, or until you halt the program.","            \"\"\")","","    @Argument(help: \"The phrase to repeat.\")","    var phrase: String","","    mutating func run() throws {","        while true { print(phrase) }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The abstract and discussion appear in the generated help screen:"}]},{"type":"codeListing","syntax":null,"code":["% repeat --help","OVERVIEW: Repeats your input phrase.","","Prints to stdout forever, or until you halt the program.","","USAGE: repeat <phrase>","","ARGUMENTS:","  <phrase>                The phrase to repeat.","","OPTIONS:","  -h, --help              Show help information.","","% repeat hello!","hello!","hello!","hello!","hello!","hello!","hello!","..."]},{"anchor":"Modifying-the-Help-Flag-Names","level":2,"type":"heading","text":"Modifying the Help Flag Names"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Users can see the help screen for a command by passing either the "},{"type":"codeVoice","code":"-h"},{"type":"text","text":" or the "},{"type":"codeVoice","code":"--help"},{"type":"text","text":" flag, by default. If you need to use one of those flags for another purpose, you can provide alternative names when configuring a root command."}]},{"type":"codeListing","syntax":"swift","code":["struct Example: ParsableCommand {","    static let configuration = CommandConfiguration(","        helpNames: [.long, .customShort(\"?\")])","","    @Option(name: .shortAndLong, help: \"The number of history entries to show.\")","    var historyDepth: Int","","    mutating func run() throws {","        printHistory(depth: historyDepth)","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When running the command, "},{"type":"codeVoice","code":"-h"},{"type":"text","text":" matches the short name of the "},{"type":"codeVoice","code":"historyDepth"},{"type":"text","text":" property, and "},{"type":"codeVoice","code":"-?"},{"type":"text","text":" displays the help screen."}]},{"type":"codeListing","syntax":null,"code":["% example -h 3","...","% example -?","USAGE: example --history-depth <history-depth>","","ARGUMENTS:","  <phrase>                The phrase to repeat.","","OPTIONS:","  -h, --history-depth     The number of history entries to show.","  -?, --help              Show help information."]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When not overridden, custom help names are inherited by subcommands. In this example, the parent command defines "},{"type":"codeVoice","code":"--help"},{"type":"text","text":" and "},{"type":"codeVoice","code":"-?"},{"type":"text","text":" as its help names:"}]},{"type":"codeListing","syntax":"swift","code":["struct Parent: ParsableCommand {","    static let configuration = CommandConfiguration(","        subcommands: [Child.self],","        helpNames: [.long, .customShort(\"?\")])","","    struct Child: ParsableCommand {","        @Option(name: .shortAndLong, help: \"The host the server will run on.\")","        var host: String","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"child"},{"type":"text","text":" subcommand inherits the parent’s help names, allowing the user to distinguish between the host argument ("},{"type":"codeVoice","code":"-h"},{"type":"text","text":") and help ("},{"type":"codeVoice","code":"-?"},{"type":"text","text":")."}]},{"type":"codeListing","syntax":null,"code":["% parent child -h 192.0.0.0","...","% parent child -?","USAGE: parent child --host <host>","","OPTIONS:","  -h, --host <host>       The host the server will run on.","  -?, --help              Show help information."]},{"anchor":"Hiding-Arguments-and-Commands","level":2,"type":"heading","text":"Hiding Arguments and Commands"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You may want to suppress features under development or experimental flags from the generated help screen. You can hide an argument or a subcommand by passing "},{"type":"codeVoice","code":"shouldDisplay: false"},{"type":"text","text":" to the property wrapper or "},{"type":"codeVoice","code":"CommandConfiguration"},{"type":"text","text":" initializers, respectively."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ArgumentHelp"},{"type":"text","text":" includes a "},{"type":"codeVoice","code":".hidden"},{"type":"text","text":" static property that makes it even simpler to hide arguments:"}]},{"type":"codeListing","syntax":"swift","code":["struct Example: ParsableCommand {","    @Flag(help: .hidden)","    var experimentalEnableWidgets: Bool","}"]},{"anchor":"Generating-Help-Text-Programmatically","level":2,"type":"heading","text":"Generating Help Text Programmatically"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The help screen is automatically shown to users when they call your command with the help flag. You can generate the same text from within your program by calling the "},{"type":"codeVoice","code":"helpMessage()"},{"type":"text","text":" method."}]},{"type":"codeListing","syntax":"swift","code":["let help = Repeat.helpMessage()","\/\/ `help` matches the output above","","let fortyColumnHelp = Repeat.helpMessage(columns: 40)","\/\/ `fortyColumnHelp` is the same help screen, but wrapped to 40 columns"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When generating help text for a subcommand, call "},{"type":"codeVoice","code":"helpMessage(for:)"},{"type":"text","text":" on the "},{"type":"codeVoice","code":"ParsableCommand"},{"type":"text","text":" type that represents the root of the command tree and pass the subcommand type as a parameter to ensure the correct display."}]}]}],"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/argumentparser\/customizinghelp"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/CustomizingHelp","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Support your users (and yourself) by providing rich help for arguments and commands."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Customizing Help","role":"article","modules":[{"name":"ArgumentParser"}]},"hierarchy":{"paths":[["doc:\/\/ArgumentParser\/documentation\/ArgumentParser"]]},"seeAlsoSections":[{"title":"Property Customization","identifiers":["doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ArgumentHelp","doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/NameSpecification"],"generated":true}],"references":{"doc://ArgumentParser/documentation/ArgumentParser/ArgumentHelp":{"role":"symbol","title":"ArgumentHelp","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ArgumentHelp"}],"abstract":[{"type":"text","text":"Help information for a command-line argument."}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/ArgumentHelp","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ArgumentHelp"}],"url":"\/documentation\/argumentparser\/argumenthelp"},"doc://ArgumentParser/documentation/ArgumentParser/NameSpecification":{"role":"symbol","title":"NameSpecification","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NameSpecification"}],"abstract":[{"type":"text","text":"A specification for how to represent a property as a command-line argument"},{"type":"text","text":" "},{"type":"text","text":"label."}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/NameSpecification","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"NameSpecification"}],"url":"\/documentation\/argumentparser\/namespecification"},"doc://ArgumentParser/documentation/ArgumentParser/CommandsAndSubcommands":{"role":"article","title":"Defining Commands and Subcommands","abstract":[{"type":"text","text":"Break complex command-line tools into a tree of subcommands."}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser\/CommandsAndSubcommands","kind":"article","type":"topic","url":"\/documentation\/argumentparser\/commandsandsubcommands"},"doc://ArgumentParser/documentation/ArgumentParser":{"role":"collection","title":"ArgumentParser","abstract":[{"type":"text","text":"Straightforward, type-safe argument parsing for Swift."}],"identifier":"doc:\/\/ArgumentParser\/documentation\/ArgumentParser","kind":"symbol","type":"topic","url":"\/documentation\/argumentparser"}}}